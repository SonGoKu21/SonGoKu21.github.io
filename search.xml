<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分蛋糕博弈(二)</title>
      <link href="/2020/11/05/envy-freeness/"/>
      <url>/2020/11/05/envy-freeness/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Little-Charity-Guarantees-Almost-Envy-Freeness"><a href="#A-Little-Charity-Guarantees-Almost-Envy-Freeness" class="headerlink" title="A Little  Charity Guarantees Almost Envy-Freeness"></a>A Little  Charity Guarantees Almost Envy-Freeness</h1><p>一点慈善确保无嫉妒</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>​    对不可分割的商品进行公平的分割是经过了充分的研究的问题。这个问题的目的是将m个商品以“公平”的方式分给n个代理人，其中每一个代理人对每个商品子集有子集的估值。我们假设是一般估值</p><p>​    无嫉妒是公平中最广泛研究的概念。然而，无嫉妒分配在商品不可分割的时候并不是总是存在的。我们在这里考虑的公平的概念是“无嫉妒至上（envy-freeness up to any good）”,从其他代理商的包裹中取出任一束后，没有代理人会嫉妒其他的代理人。不知道这种分配是否总是存在。</p><p>​    商品集划分成n+1个子集($X_1,…,X_n,P$)，其中$i\in[n]$，$X_i$是分配给代理人$i$的束，集合$P$是未分配的（或者说捐赠给慈善机构的）如此，我们有：</p><p>$\bullet$ 无嫉妒至上</p><p>$\bullet$ 没有代理人认为集合$P$高于他自己的束，并且</p><p>$\bullet$ 少于n的商品用于慈善，$.i.e,|P|&lt;n(通常 m \ge n)$</p><p>我们的证明是建设性的，引导了使用伪多项式时间算法来找到这种分配。当代理人具有加性估值并且$|P|$很大（当$|P|$接近$n$的时候），我们的分配同样能有很好的最大最小份额（MMS）保证。此外，我们算法的一个较小变量还显示了存在一个4/7的逐组最大最小化的份额（GMMS，groupwise maximin share）:这是一个比MMS更强的公平概念。改善了以知的近似GMMS分配的当前最佳的1/2界限分割。 </p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>​    在竞争的代理人之间公平分割（fair division）物品是经济学和计算机中的基础问题。商品集$M$有$m$个物品，目标是以公平的方式在$n$个代理人之间分配商品。分配指的是将$m$划分为不相交的子集($X_1,…,X_n$)。其中$X_i$是给代理人$i$的商品集。那么什么时候一个分配可以被认为是“公平”呢？关于公平最深入研究的概念之一是“无嫉妒”。每一个代理人都有一个与每一个$M$的子集相关联的值并且如果代理人$i$认为$X_j$的价值比$X_i$高的时候，代理人$i$会嫉妒$j$。如果在一个分配中，没有人嫉妒其他的人的话，就被认为是无嫉妒的。一个无嫉妒的分割可以被认为是$n$个代理人之间对商品集$M$的公平且理想的分配。因为没有一个代理人是嫉妒另一个代理的。这种分配机制可以追溯到圣经。</p><p>​    不同于可分割的土地，在我们设定中的商品是可以不分割的并且无需无嫉妒的分配给定商品集。考虑下面的简单示例，其中有两个代理人并且他们都希望拥有的单个商品：其中的一个代理人收到该商品，而另一个代理人嫉妒他。因为不需要考虑无嫉妒分配，因此考虑了一些放宽的措施（Relaxation）。</p><p>​    <strong>Relaxation</strong>放宽：Budish引入了$EF1$的概念：这是一种商品分配，它是单一商品的无嫉妒性（envy-free to one good） 在$EF1$分配中，代理人$i$ 可能会嫉妒代理人$j$，但是这种嫉妒在某些商品从$X_j$中移除的时候会消失。注意，实际上并没有真正的从$X_j$中移除任何商品：这只是一种评估$i$价值$X_j$比$X_i$多多少的一种方法。也就是说，如果$i$认为 $X_j$的价值比$X_i$多，那么会存在一些$g\in X_j$使得$i$价值$X_i$至少和$X_j\setminus {g}$ (差集)一样多。回到两个代理人和单个商品的例子，一个代理人收到此物品的分配叫做$EF1$。能够知道$EF1$是总是存在的；这样的分配可以有效的计算出来。</p><p>​    Caragiannis等<sup>[13]</sup>。 引入了一种叫做$EFX$的无嫉妒概念，它比$EF1$强。 $EFX$分配是“任一商品无嫉妒的分配”。在$EFX$分配中，代理$i$可能会嫉妒代理$j$，但是，一旦从$X_j$中删除了任一商品，这种嫉妒就会消失。因此，每个$EFX$分配也都是 $EF1$，但不是每个$EF1$分配都是$EFX$。</p><table><thead><tr><th></th><th>a</th><th>b</th><th>c</th></tr></thead><tbody><tr><td>Agent1</td><td>1</td><td>1</td><td>2</td></tr><tr><td>Agent2</td><td>1</td><td>1</td><td>2</td></tr></tbody></table><p>​    考虑以上的两个例子，有$a,b,c$三个商品，两个具有加性估值的代理人（集$S\in M$的值等于$S$中商品的价值之和）。两个代理人都认为$c$的价值是$a$或$b$ 的两倍。代理人1获得$\{a\}$，代理人2获得$\{b,c\}$ 的这种分配是$EF1$但不是$EFX$。当代理人1获得$\{a,b\}$，代理人2获得$\{c\}$ 的这种分配是$EFX$。实际上，后一种分配似乎比前一种分配更加的公平。可以说，$EFX$是对无嫉妒的不可分割事务的最好公平。尽管已知$EF1$分配始终存在，但是$EFX$分配是否存在的问题仍然是一个未解决的问题。</p><p>​     Plaut和Roughgarden表明，$EFX$分配始终存在（i）只有两个代理人时，或（ii）所有的代理人有同样估值。而且，在[26]中表明，即使在只有两个具有相同子模块估值函数的限制中，也可能需要成倍地指数查询许多值来确定$EFX$。直到最近的研究表明，即便是仅有三个具有加性估值的代理人的情况下，$EFX$分配是是恒存在的。Chaudhury等人最近对这个问题给出了肯定的答案。[15]表明仅有三个具有加性估值的代理人的情况下，$EFX$分配是是恒存在的。有人在[26]中指出：“我们怀疑至少对于一般估值来说，存在不存在$EFX$分配的情况”。</p><p><strong>A relaxation of EFX</strong>.   最近，Caragiannis等人。 [12]介绍了一种更宽松的$EFX$概念，称为$EFX-with-charity$。 这是$EFX$的部分分配，即不需要在代理人之间分配整个商品。 因此，有些商品可能会被分配出去，并假定这些未分配的商品是捐赠给慈善机构的。 有一个非常简单的分配，即$EFX-with-charity$，其中没有将商品分配给任何代理人，因此所有商品都捐赠给了慈善机构。显然，这不是一种有趣的分配，有人会寻求具有更好保证的分配。这种分配在[12]中有表明。                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       </p><p>​    设置$X^<em> = &lt;X^</em>_1,…,X^<em>_n&gt;$为整个商品集的最佳纳什社会福利分配（该分配最大化$\begin{matrix}\prod_{i=1}^N v_i(X_i^</em>) \end{matrix}$，其中$v_i$是代理人$i$的估值函数）。在[12]中表明，总是存在有$EFX-with-charity$的分配$X=(X_1,…,X_n)$，其中每个代理人都至少收到其$X^<em>$的分配值的一半。有趣的是，[12]中表明，对于所有的$i$有$X_i\in X_i^</em>$。不幸的是，未分配的商品的数量或任何代理人给慈善机构捐赠的商品的价值是没有上限的。</p><p>​    我们认为这些是重要的问题。理想的分配是使用$EFX$机制分配所有的商品。因此我们希望能够保证将大量商品分配给代理人。此外，因为$EFX$分配保证了无嫉妒，一旦任何物品从另外的代理人的集中移除，我们本着同样的精神，去寻找一种$EFX$（局部）分配，其中没有人嫉妒未分配的商品集。文献[12]中的分配不能保证外分配的商品集的数量，也不能保证任何代理人对这组未分配商品的重视程度是否超过其自己的商品束。就是说，我们寻求其分配给慈善机构的范围有界限的$EFX-with-charity$分配。即捐赠给慈善机构的商品集的大小和价值的界限。</p><h3 id="1-1-我们的结果"><a href="#1-1-我们的结果" class="headerlink" title="1.1 我们的结果"></a>1.1 我们的结果</h3><p>设置$N=[n]$为代理人集。每一个代理人$i\in [n]$都有一个估值函数$v_i:2^M \rightarrow R_\ge 0$，其中$M$是$m$个商品的商品集。</p><h4 id="1-1-1-一般估值"><a href="#1-1-1-一般估值" class="headerlink" title="1.1.1 一般估值"></a>1.1.1 一般估值</h4><p>我们展示了一般估值函数的主要存在结果，即我们对任何估值函数$v_i$所做的唯一假设是</p><p>（i）规范化，即$v_i(\empty)=0$（ii）单调性，即$S\in T$表明$v_i(S)\le v_i(T)$。</p><p>相反的是，[12]中的$EFX-with-charity$分配仅适用于加性估值，即对于任何$S\in M$和$i\in [n]$，我们有$v_i(S)=\begin{matrix}\sum_{g\in S} v_i(\{g\}) \end{matrix}$。</p><p>$\bullet$我们表明总存在一个分配$X = &lt;X_1,…,X_n&gt;$满足以下的属性：</p><p>1.$X$是$EFX$，$i.e.$对于任意两个代理人$i,j:v_i(X_i)\ge v_i(X_j\setminus\{g\})$，任意$g\in X_j$；</p><p>2.对所有的代理人$i$有$v_i(X_i)\ge v_i(P)$，其中$P=M \setminus \begin{matrix} \bigcup_{i=1}^n X_i \end{matrix}$是未分配商品集；</p><p>3.$|P|&lt;n$（$n$是代理人的数量）。</p><p>​    我们的结果表明，在n个代理人中，如果只有一个没有偏好的代理人（例如，我们对所有的$S\subseteq M$有$v_i(S)=0$），则对于一般估值而言，总存在完整的$EFX$分配：在代理人集$N\setminus\{i\}$中，找到满足上述所有三个属性的$EFX$分配。注意代理集$N\setminus\{i\}$中的分配是$EFX$。我们现在分配$P$（未分配的商品的集）给代理人$i$。观察的到，代理人$i$不嫉妒任何人，因为$i$对所有的商品集有着相同的价值函数，并且没有人嫉妒$i$，因为没有人嫉妒$P$（通过条件2）。因此我们有一个完成的$EFX$分配！</p><p>​    我们的证明是建设性的。我们从没有商品分配给代理人开始，并通过最多$nmV/\Delta$应用的三个简单更新规则来得到所要求的分配，其中$n$是代理人的数量，$m$是商品的数量，$V=max_iv_i(M)$是任何代理人的最大价值，$\Delta=min_imin\{|v_i(T)-v_i(S)|:S,T\subseteq M 且 v_i(S)\neq v_i(T)\}$是不同估值之中最小的差值。</p><p>​    更新规则使用最小嫉妒子集预言机：给定$S\subseteq M$，使得有一个代理人对S的重视程度高于其自己的束。找到一个包含式最小子集$Z\subseteq S$。从而使得一个代理人认为$Z$的价值比自己的束高。这个预言机可以通过最多nm值查询的简单算法来实现。</p><p>$\bullet$对于一般估值，使用$poly(n,m,V,1/\Delta)$值查询，即在多项式时间内，计算具有1-3属性的$EFX$分配。</p><h4 id="1-1-2-相同的估值"><a href="#1-1-2-相同的估值" class="headerlink" title="1.1.2 相同的估值"></a>1.1.2 相同的估值</h4><p>代理人都有相同的估值函数时，我们的分配是完全的。也就是说，$|P|=0$。这是对相同（一般）估值存在完整$EFX$分配的替代证明。</p><h4 id="1-1-3-加性估值"><a href="#1-1-3-加性估值" class="headerlink" title="1.1.3 加性估值"></a>1.1.3 加性估值</h4><p>最容易理解的估值函数类别是加性估值集。我们考虑所有的代理人都有加性估值的情况，并证明我们的分配或者我们分配中的很小一部分可以保证公平的其他几个概念。</p><p><strong>确保高纳什社会福利</strong>  我们表明，修改算法的开始步骤可以确保满足上述属性1-3的分配$X$也具有较高的纳什社会福利。也就是说，$v_i(X_i)\ge \frac{1}{2}\cdot v_i(X_i^<em>)$，其中$X^</em> = &lt;X^<em>_1,…,X^</em>_n&gt;$是纳什社会福利的最佳分配。在这里我们使用[12]中计算的分配在我们开始的步骤作为黑匣子，因此我们的结果可以视为[12]中结果的扩展。</p><p><strong>未分配商品数量和MMS担保</strong>  例外一个有趣且深入研究的公平概念是最大最小分享（maximin share）。假设代理人$i$知道，就她的估值而言，她将获得最差的束，所以必须将$M$划分为$n$个束或者集合。然后，$i$选择$M$的一个划分，最大化最差束的价值。最差束的价值是代理人$i$的最大最小化分享。这里有一个很重要的问题：是否总是存在$M$的分配，每个代理人都能够获得至少等于其maximin share份额的束呢？</p><p>​    正式的，设置$N$和$M$分别为$n$个代理人的集和$m$个商品的集。我们定义一个代理人的maximin share如下：（在这里$\chi$是所有完整分配的集合）<br>$$<br>MMS_i(n,M)= \begin{matrix}\max_{&lt;X_1,…,X_n&gt;\in\chi} \min_{j\in v_i} (X_j) \end{matrix}<br>$$<br>  目标是确定$M$的分配,$&lt;X_1,…,X_n&gt;$以便对于每个$i$我们都有$v_i(X_i)\ge MMS_i(n,M)$。这个问题首先由Budish提出[11]。Procaccia和Wang展示了如此的分配不需要存在，即便在只有三个代理人的受限环境下。此后，研究了近似MMS分配[27,20,22,21]，并且存在多项式时间算法来确定分配，其中对于所有$i$，代理人$i$至少获得一束价值$\alpha \cdot MMS_i(n,M)$；当前对$\alpha$最好的保证是$3/4-\epsilon$（对于任意$\epsilon &gt; 0$）并且最近被改善到$3/4$，通过Garg和Taki[21]。</p><p>​    Amanatidis等[1]表明，任何完整的$EFX$分配也是$4/7-MMS$分配。我们表明，当未分配的商品的数量很大时，我们的分配有望提供更好的$MMS$保证。让$X = &lt;X_1,…,X_n&gt;$是如上面的属性1-3所述的我们的分配，$P$是商品的集合。对于任意的代理人$i \in [n]$，我们有：<br>$$<br>v_i(X_i)\ge \frac{1}{2-|P|/n}MMS_i(n,M)<br>$$<br>因此，未分配的商品数量越多，我们在$MMS$上获得的保证就越好。极值是$|P|=0$和$|P|=n-1$。当$|P|=0$时，我们有完整的$EFX$分配，当$|P|=n-1$时，我们有一个几乎是$MMS$的分配：对于所有$i$,$v_i(X_i)\ge (1-1/n)\cdot MMS_i(n,M)$</p><p><strong>改进的Groupwise MMS保证</strong>  Barman等[6]最近引入了一种公平的概念，称为群最大最小份额(GMMS)，它比MMS更强大。如果满足对于每个子组的代理人，有一组商品的集合分配给他们，则这个分配被称为GMMS。正式地，一个完整的分配$X = &lt;X_1,…,X_n&gt;$是$\alpha - GMMS$，如果对于任意的$N’ \subseteq N$，我们有$v_i(X_i)\ge \alpha \cdot MMS_i(n’,\bigcup_{i\in N’}X_i)$，其中$n’=|N’|$。每一个GMMS分配，例如$\alpha=1$，也是一个完整的$EFX$分配。</p><p>​    众所周知[6]GMMS严格概括了MMS。特别是，在[6]中表明，GMMS分配排除了一些非常不令人满意的具有MMS保证的分配。例如，考虑一个示例，该示例具有n个加性估值的代理人，具有$n-1$商品的商品集$M$，并且每一个代理人对每一个商品有着估值。因为商品的数量比代理人的数量少，我们对每个代理人$i$有$MMS_i(n,M)$。所以任何的分配都有MMS保证。不难看出，具有GMMS保证的唯一分配只有一个，其中$n-1$个代理人获得唯一一个商品，一个代理人没有任何商品。自然而然地，与MMS相比，近似GMMS是一个更困难的问题。尽管$\frac{3}{4}-MMS$分配总是存在，但已知最大的$\alpha-GMMS$分配的$\alpha$值是1/2。我们扩展了Amanatidis等人的结果，使MMS如下：</p><p>$\bullet$$\frac{4}{7}-GMMS$分配总是存在并且可以在多项式时间内计算</p><p>特别的，我们表明修改后的算法的最后一步会导致完整分配为$\frac{4}{7}-GMMS$ 。最近和独立地，Amanatidis等人。  [3]显示了相同的近似值。</p><h3 id="1-2-我们的技术"><a href="#1-2-我们的技术" class="headerlink" title="1.2 我们的技术"></a>1.2 我们的技术</h3><p>现在，我们概述用于查找$EFX$分配的主要思想。我们首先回顾一下Lipton等人[25]的算法找到$EF1$分配。他们使用了嫉妒图的概念：每一个顶点都对应于一个代理人，并且边$(i,j)$代表$i$嫉妒$j$。保持不变的是，嫉妒图是DAG:一个回路对应于一个嫉妒回路，并且通过沿着一个回路交换束。每一位代理人变得更好并且嫉妒边的数量没有增加。更加准确地是，如果$i_o\rightarrow i_1\rightarrow i_2\rightarrow …\rightarrow i_{i-1}\rightarrow i_o$是嫉妒图中的一个回路。然后将$X_{i_{j+1}}$重新分配给代理人$i_j$,$0\leq j\leq \ell$(索引将以模数$\ell$ 读取)将会提高权重每个代理人的估值。同样，如果存在从一条边从$s$到$i_{k}$，$s$不属于回路的一部分。那么我们在沿着回路交换束之后，该边从$s$指向$i_{k+1}$.因此，途中嫉妒边的数量没有增加，并且在回路中代理人的价值也会上升，因此可以消除回路。</p><p>​    [25]中的算法循环运行，并且始终保持分配是$EF1$。在每个回合开始时，标识一个不嫉妒的代理$s$（这是DAG的一个源顶点），并将没有分配的商品g分配给s。新分配也是$EF1$，因为没有人会嫉妒移除商品g后的s束。</p><p><strong>重新分配操作</strong>  现在，我们重点介绍$EF1$分配和$EFX$分配之间的关键区别。 根据Lipton等人的算法。  [25]，很明显，给定一组商品$M_0$的EF1分配，只需将$M_1$的商品逐一添加到存在的束中并且巧妙的改变所有者（如果有必要的话），对于任何$M_0 \bigcup M_1$，就可以确定EF1分配。 直观地讲，我们无需剪切或合并任何$EF1$分配中形成的束。 我们可以将未分配的商品适当地附加到当前束中。</p><p>对于$EFX$，上述策略与实际情况想去甚远，考虑以下所示的示例，其中三个代理商具有加性估值，四个产品$a,b,c,d$。</p><table><thead><tr><th align="center"></th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">d</th></tr></thead><tbody><tr><td align="center">Agent 1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">2</td></tr><tr><td align="center">Agent 2</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">2</td></tr><tr><td align="center">Agent 3</td><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">2</td></tr></tbody></table><p>对于前三种商品的$EFX$分配必须给这三个代理人中的每一个都准确地给出a，b，c中的一个。 但是，所有四种商品的$EFX$分配必须将单例集{d}分配给某个代理（例如，agent 1），或者例如{a}分配给agent 2，{b，c}分配给agent 3。因此，需要对分配进行切割和合并。 如果有很多代理人（每个代理人都有自己的估值），则很难进行分拆合并操作。 在这里，我们实现了如下的全局重新分配操作。</p><p>改善社会福利  假设我们有$EFX$分配$X = &lt;X_1,…,X_n&gt;$在某些子集$M_0\sub M$上。我们现在想要添加一个商品$g\in M\setminus M_0$。但是我们将无法在$M_o\cup \{g\}$上保证$EFX$ 分配。我们将确保情况(i)或情况（ii）发生</p><p>(i) 我们有一个在子集$M_o\cup \{g\}$上的$EFX$分配$X’ = &lt;X’_1,…,X’_n&gt;$使得对于所有的$i$有$v_i(X’_i)\ge v_i(X_i)$并且至少存在一个代理人$j$有$v_j(X’_j) &gt; v_j(X_j)$。因此$\begin{matrix}\sum_{i\in [n]} v_i(X’_i) &gt; \sum_{i\in [n]} v_i(X_i) \end{matrix}$；换句话说，严格的改善了社会福利。</p><p>(ii)我们有一个在$M_o\cup \{g\}$上的$EFX$分配并且社会福利没有增加。</p><p>因此，在我们算法的每个步骤中，要么增加社会福利，要么增加分配的商品数量而不降低社会福利，因此我们总是在进步。这类似于Plaut和Roughgarden [26]使用的方法，当代理商具有次加性估值时，它保证存在$\frac{1}{2}-EFX$。 现在，我们概述如何确保情况（i）和（ii）之一必须发生。</p><p>为了简化说明，我们假定与我们的起始$EFX$分配$X$对应的嫉妒图只有一个来源$s$。 将$g$添加到$s$的束中：如果没有人嫉妒$s$的任何商品，那么我们的情况就很容易了，因为我们在$M_o\cup \{g\}$上有$EFX$分配。 在这种情况下，我们“使”嫉妒图“循环”（如果创建了循环）并继续。请注意，沿着嫉妒图的循环交换束可以增加社会福利。</p><p><strong>最嫉妒的代理人</strong>  现在假设在将$g$分配给$s$之后，有一个或多个代理人嫉妒$s$的任何商品。 为了解决这个问题，我们引入了最嫉妒代理人的概念。 让$i$成为一个嫉妒$s$的所有东西的代理人，所以对于某些$S’\sub X_s\cup \{g\}$有$v_i(X_i)&lt;v_i(S’)$。令$S_i$为$X_s\cup \{g\}$的任何包含式最小子集，使得$v_i(X_i)&lt;v_i(S_i)$（打破任意关系）。所以对任何$T\sub S_i$，我们有$v_i(X_i)\ge v_i(T)$。<br> $\bullet$ 代理人$i$使得对于某些$S_i\sub X_s \cup \{g\}$有$v_i(X_i)&lt;v_i(S_i)$，没有任何代理人嫉妒$S_i$的严格子集，将会称为在 $X_s\cup \{g\}$上最嫉妒的代理人（break ties arbitrarily）</p><p>让$t$成为$X_s\cup \{g\}$上的最嫉妒代理人。关键的观察结果是，没有任何代理人嫉妒$S_t$的任何商品。否则的话，他将与$S_t\sub X_s\cup \{g\}$成为一个包含书最小嫉妒子集相矛盾，即，任何代理人都不嫉妒$S_t$的合适子集。回想一下s是唯一来源的假设，所以在这嫉妒图中有一个路径$s\rightarrow i_1\rightarrow i_2\rightarrow …\rightarrow i_{k-1}\rightarrow t$。我们沿着这条路径向左移动束：所以$s$获得了$i_1$的束，并且对于$1\le r\le k-1$：$i_r$获得$i_{r+1}$的束（其中$i_k=t$)，最终$t$获得$S_t$。$X_s\cup \{g\}$中的商品被仍回到未分配的商品池中。</p><p>可以观察到，与分配$X$相比，此路径上的每个代理人现在严格来说都比其他代理人更好。 此外，根据$S_t$的定义，没有任何代理人嫉妒任何其他代理人。 因此，我们有一个期望的$EFX$分配$X’$。 当有多个来源(Source)时，只要有足够的未分配商品，我们就可以采用这种技术。 特别是，未分配商品的数量必须至少等于嫉妒图中的来源数量。 我们将在第2节中对此进行详细描述。<br>   我们想将上述方法与其他$EFX$算法进行对比[26，12]。  Plaut和Roughgarden [26]的$1/2-EFX$算法或者将g（新商品）与现有的束合并，或者将单例集$\{g\}$分配给代理。  Caragiannis等人的$EFX-with-charity$算法。  [12]采用最大纳什社会福利分配作为输入，然后从实例中永久删除一些商品。 我们认为“最嫉妒的代理人”这一概念是一种自然的方式，可以打破束以保持嫉妒的自由，这是我们工作的创新贡献之一。</p><p><strong>我们的其他结果</strong> 关于我们具有近似$MMS$保证的结果，如果$EFX$分配中未分配商品的数量很大，那么源点的数量也必须很大：这些是令人嫉妒的代理商。 而且，没有代理人嫉妒未分配的商品集。<br>   现在假设$|P|  = n-1$。 这意味着每个代理人都是来源。 因此，没有代理人嫉妒任何其他代理人的束以及未分配商品的集合。 因此，对于每个代理$i$，我们有：<br>$$<br>\begin{split}<br>v_i(X_i)\ge \frac{v_i(M)}{n+1} \ge (1+1/n)^{-1}\cdot \frac{v_i(M)}{n}\<br>     \qquad  \ge  (1-1/n)^{-1}\cdot MMS_i(n,M)<br>\end{split}<br>$$<br>其中，$v_i(M)/n\ge MMS_i(n,M)$对附加价值具有约束。我们在第三节中展示了近似$MMS$分配的结果和近似$GMMS$分配的改进边界。</p>]]></content>
      
      
      <categories>
          
          <category> game-theory </category>
          
      </categories>
      
      
        <tags>
            
            <tag> envy-freeness </tag>
            
            <tag> 博弈论 </tag>
            
            <tag> 免嫉妒分割 </tag>
            
            <tag> 论文翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分蛋糕博弈（一）</title>
      <link href="/2020/11/04/game-theory/"/>
      <url>/2020/11/04/game-theory/</url>
      
        <content type="html"><![CDATA[<h1 id="分蛋糕博弈（一）"><a href="#分蛋糕博弈（一）" class="headerlink" title="分蛋糕博弈（一）"></a>分蛋糕博弈（一）</h1><h2 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h2><p>有一家外企招聘员工时出了一道面试题：要求应聘者把一盒蛋糕切成了八份，分给八个人，但是蛋糕盒里还必须留一份。</p><p>解析：最简单直接的方法，肯定是均分，可是我们能够确保其他人认可你的均分的结果嘛？ 最可能实现一半对一半的公平分配的方案，是A切蛋糕，让B先选。 </p><p>这种方案很难保证公平，因为双方都不会愿意成为切蛋糕的一方。虽然双方都希望对方切、自己挑，但是僵持的时间不会一直维持，因为这样所带来的时间开销，会导致得不偿失，出现收益缩水的现象。</p><p>在公平分割（fair division）问题中，有一个根本的公平原则叫做“均衡分割”（Proportional division）。如果n个人分蛋糕，则每个人都认为自己得到了整个蛋糕至少1/n的价值。 </p><h2 id="“你来分我来选”"><a href="#“你来分我来选”" class="headerlink" title="“你来分我来选”"></a>“你来分我来选”</h2><p>A，B先分，A来切，B来选</p><p>然后，A和B把手中的蛋糕分成三份，C从每个人手中取走一份，那么A、B、C都有两份。</p><p>A、B、C再将自己手中的蛋糕分成四份，让第四个人D从三人手中各挑选一份。</p><p>重复上述的过程，直到最后一个人选完自己的蛋糕。</p><p>前提：只要每个人在切蛋糕时能够做到均分，无论哪块被挑走，他都不会吃亏；保证每个人手中的蛋糕在自己看来都是不小于蛋糕总价值1/n的（PS. 这样做蛋糕会被分的乱七八糟，不过，whatever…）</p><h2 id="“最后削减人算法”"><a href="#“最后削减人算法”" class="headerlink" title="“最后削减人算法”"></a>“最后削减人算法”</h2><p>总人数n。</p><p>首先A从蛋糕中切出他认为的1/n，然后传递给B，B可以选择直接把这块蛋糕递交给C，也可以选择从中切除一小块（即修剪），然后移交给下一个人。</p><p>规定：最后一个对蛋糕进行“修剪”的人将获得这块蛋糕，其余的n-1人从头开始重复这个流程。</p><p>结果：每进行一个loop，都会有一个人拿到了令他满意的utility，直到所有人得到蛋糕。并且保证了每个人手中的蛋糕是整个蛋糕价值的1/n。</p><p>不过，以上两种方法并非完全公平，对于分蛋糕的人来说，两块蛋糕的价值均等，但是对于选蛋糕的人来说，两块蛋糕的价值是有差异的，因此，选蛋糕的人往往能够获得大于1/2的价值。</p><p><strong>不同人对蛋糕的价值的评判标准不同</strong></p><h3 id="“免嫉妒分割（envy-free-division）”"><a href="#“免嫉妒分割（envy-free-division）”" class="headerlink" title="“免嫉妒分割（envy-free division）”"></a>“免嫉妒分割（envy-free division）”</h3><p>每个人都认为别人的蛋糕没有我手里的好</p><p>1960年，John Selfridge和John Convey各自独立地分析了人数为3的情况，构造除了第一个满足免嫉妒条件的三人分割方案。这种分割方案被称为“Selfridge-Convey算法”。</p><p>首先，A 把蛋糕分成三等份（当然是按照自己的看法来分的，后面提到的切分、选取也都是这样）。如果 B 认为这三块蛋糕中较大的两块是一样大的，那么按照 C 、 B 、 A 的顺序依次选取蛋糕，问题就解决了。麻烦就麻烦在 B 认为较大的两块蛋糕不一样大的情况。此时，B 就把最大的那块蛋糕的其中一小部分切下来，让剩余的部分和第二大的蛋糕一样大。被切除的部分暂时扔在一旁，在第二轮分割时再来处理。接下来，按照 C 、 B 、 A 的顺序依次选蛋糕，但有一个限制：如果 C 没有选那块被修剪过的蛋糕，B 就必须选它。<br>  这样，三人就各分得了一块蛋糕。由于 A 是切蛋糕的人，对于他来说拿到哪一块都一样，因此 A 不会嫉妒别人。由于 B 选取的是两个较大块中的一个，因此 B 也不会嫉妒别人。由于 C 是第一个选蛋糕的，显然他也不会嫉妒别人。因此，就目前来说，三个人之间是不会有嫉妒发生的。<br>  但是，还有一小块被切除的部分没分完，因此分割流程进入第二轮。<br>  在 B 和 C 之间，一定有一个人选择了那块被修剪过的蛋糕。不妨把这个人重新记作 X ，另一个人就记作 Y 。让 Y 把最后那一小块分成三等份，按照 X 、 A 、 Y 的顺序依次挑选蛋糕，结束第二轮流程。这一轮结束后，每个人都又得到了一小块蛋糕。由于 X 是第一个选蛋糕的人， X 显然不会嫉妒别人；由于 Y 是分蛋糕的人， Y 也不会嫉妒别人。由于 A 比 Y 先选， A 不会嫉妒 Y 。最后，A 也是不会嫉妒 X 的，因为即使 X 拥有了第二轮中的全部蛋糕，X 手里的蛋糕加起来也只是第一轮开始时 A 等分出来的其中一块蛋糕，这是不可能超过 A 的。这就说明了，三个人之间仍然不会有嫉妒发生，Selfridge-Conway 算法的确满足免嫉妒条件。</p><p>  不过，Selfridge-Conway 算法只能在三人分蛋糕时使用，并不能扩展到人数更多的情况。对于人数更多的情况，免嫉妒分割问题更加困难，目前数学家们还没有找到一个比较可行的方案。正如数学家 Sol Garfunkel 所说，分蛋糕问题是 20 世纪数学研究中最重要的问题之一。直到现在，也还有一大群数学家正投身于分蛋糕问题之中，研究包括免嫉妒性在内的各种公平条件，致力于构造新的公平分割方案。</p>]]></content>
      
      
      <categories>
          
          <category> game-theory </category>
          
      </categories>
      
      
        <tags>
            
            <tag> envy-freeness </tag>
            
            <tag> 博弈论 </tag>
            
            <tag> 免嫉妒分割 </tag>
            
            <tag> game-theory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇杂谈</title>
      <link href="/2020/11/03/first-article/"/>
      <url>/2020/11/03/first-article/</url>
      
        <content type="html"><![CDATA[<h1 id="hello-我的朋友们，欢迎来到我的blog"><a href="#hello-我的朋友们，欢迎来到我的blog" class="headerlink" title="hello,我的朋友们，欢迎来到我的blog"></a>hello,我的朋友们，欢迎来到我的blog</h1><p>这是写的第一个博客，以后我会把我所学到的，所看到的东西记录在这个里面，不知道这场征途会有多远。</p><p><img src="favicon.jpg" alt="favicon"></p>]]></content>
      
      
      <categories>
          
          <category> 感想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
